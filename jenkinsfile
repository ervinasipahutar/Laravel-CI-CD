pipeline {
    agent any
    tools {
        dockerTool 'Docker'   // Nama harus sama seperti di global config
    }
//testing aja
//testing baru
    environment {
        DOCKER_IMAGE = "royalnavy/laravel-image:2.9"
        DOCKER_USERNAME = "cfab7228-2a4c-4e1b-89ee-1a741b6c7436"
        DOCKER_PASSWORD = "c6a34f5b-4866-4adb-aac6-7ca18c52ff71" 
        FILE_NAME = "laravel"
    }
    
    stages {
        
        stage ('Checkout') {
            steps {
                git branch: 'master', url: 'https://github.com/muhamadilhamh/Laravel-CI-CD.git'
            }
        }

        // stage('Install Dependencies') {
        //     steps {
        //         sh 'composer install --no-dev --optimize-autoloader'
        //         sh 'npm install' // If you use Node.js dependencies for frontend assets
        //     }
        // }
        
        // stage ('Build & Package') {
        //     steps {
        //         sh 'php artisan test'
        //     }
            
        //     // post {
        //     //     success {
        //     //         archiveArtifacts artifacts: "${PROJECT_DIR}/target/*.jar", fingerprint: true
        //     //     }
        //     // }
        // }
        stage('Check Docker') {
            steps {
                sh 'which docker || echo "❌ Docker tidak ditemukan"'
                sh 'docker --version || echo "❌ Docker belum terinstall"'
            }
        }
        stage ('Build Docker Image') {
            steps {
                sh "docker build -t ${DOCKER_IMAGE} ."
            }
        }
        
      stage('push docker image'){
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'docker-hub-cred', passwordVariable: "${DOCKER_PASSWORD}", usernameVariable: "${DOCKER_USERNAME}")]) {
                        // Perintah docker login menggunakan variabel dari kredensial
                        sh "docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}"
                        // Kemudian push image
                        sh "docker push ${DOCKER_IMAGE}"
                        // Opsional: Logout setelah push selesai untuk keamanan
                        sh "docker logout"
                    }
                }
            }
        }
        
        stage ('Deploy via OpenShift') {
            steps {
                echo 'Deploying application on target server via OpenShift...'
                sh "oc apply -f ${FILE_NAME}.yml"
            }
        }
    }
    
    post {
        success {
            echo 'Application deployed successfully! ✅'
        }
        failure {
            echo 'Deployment failed. Please check the logs. ❌'
        }
    }
}