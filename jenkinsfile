pipeline {
  agent any

  environment {
    DOCKER_IMAGE_NAME = "royalnavy/laravel-image"
    DOCKER_IMAGE_TAG  = "v${BUILD_NUMBER}"
    FILE_NAME         = "laravel"
    DOCKER_HUB        = "b2ff3deb-afa2-4d83-9867-cd72fdee776d"  // credsId docker hub
    OC_TOKEN          = "baba7fa1-f682-4c2e-ba9b-070e1edc5e34"  // credsId ocp token
  }

  stages {

    stage ('Checkout') {
      steps {
        git branch: 'master', url: 'https://github.com/muhamadilhamh/Laravel-CI-CD.git'
      }
    }

    /* === TRIVY FS: Enforce + SARIF === */
    stage('Trivy FS Scan (source)') {
      steps {
        sh '''
          set -e
          # 1) Enforce & tampilkan tabel di console
          trivy fs . \
            --severity CRITICAL,HIGH \
            --ignore-unfixed \
            --exit-code 1 \
            --cache-dir .trivycache \
            --format table

          # 2) Buat laporan SARIF (tidak memengaruhi exit code)
          trivy fs . \
            --severity CRITICAL,HIGH \
            --ignore-unfixed \
            --exit-code 0 \
            --cache-dir .trivycache \
            --format sarif --output trivy-fs.sarif
        '''
      }
      post { always { archiveArtifacts artifacts: 'trivy-fs.sarif', allowEmptyArchive: true } }
    }

    stage('PHPUnit & Coverage') {
      when { expression { fileExists('vendor/bin/phpunit') } }
      steps {
        sh '''
          set -e
          php -d xdebug.mode=coverage vendor/bin/phpunit --coverage-clover coverage.xml || true
        '''
      }
      post { always { archiveArtifacts artifacts: 'coverage.xml', allowEmptyArchive: true } }
    }

    stage('SonarQube Analysis') {
      steps {
        withSonarQubeEnv('sonarqube') {
          script {
            def scannerHome = tool 'SonarScanner'
            sh """
              ${scannerHome}/bin/sonar-scanner \
                -Dsonar.projectKey=laravel-app-ci-cd \
                -Dsonar.sources=. \
                -Dsonar.php.file.suffixes=.php \
                -Dsonar.exclusions=**/vendor/**,**/node_modules/**,**/storage/**,**/public/**
            """
          }
        }
      }
    }

    stage('Quality Gate') {
      steps {
        timeout(time: 15, unit: 'MINUTES') {
          script {
            def qg = waitForQualityGate()
            if (qg.status != 'OK') error "Pipeline failed because Quality Gate was ${qg.status}"
          }
        }
      }
    }

    stage ('Build Docker Image') {
      steps {
        sh "docker build -t ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG} ."
      }
    }

    stage('Push Docker Image') {
      steps {
        withCredentials([usernamePassword(credentialsId: "${DOCKER_HUB}", passwordVariable: 'DOCKER_PASS', usernameVariable: 'DOCKER_USER')]) {
          sh '''
            set -e
            echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
            docker push '"'"'${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}'"'"'
            docker logout || true
          '''
        }
      }
    }

    /* === TRIVY IMAGE: Enforce + SARIF === */
    stage('Trivy Image Scan (registry)') {
      steps {
        withCredentials([usernamePassword(credentialsId: "${DOCKER_HUB}", passwordVariable: 'DOCKER_PASS', usernameVariable: 'DOCKER_USER')]) {
          sh '''
            set -e
            # 1) Enforce & console table
            trivy image \
              --severity CRITICAL,HIGH \
              --ignore-unfixed \
              --exit-code 1 \
              --cache-dir .trivycache \
              --username "$DOCKER_USER" --password "$DOCKER_PASS" \
              --format table \
              ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}

            # 2) SARIF untuk arsip
            trivy image \
              --severity CRITICAL,HIGH \
              --ignore-unfixed \
              --exit-code 0 \
              --cache-dir .trivycache \
              --username "$DOCKER_USER" --password "$DOCKER_PASS" \
              --format sarif --output trivy-image.sarif \
              ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}
          '''
        }
      }
      post { always { archiveArtifacts artifacts: 'trivy-image.sarif', allowEmptyArchive: true } }
    }

    stage ('Deploy via OpenShift') {
      steps {
        withCredentials([string(credentialsId:"${OC_TOKEN}" , variable: 'TOKEN')]){
          sh """
            set -euo pipefail
            oc login --token="$TOKEN" --server=https://api.rm1.0a51.p1.openshiftapps.com:6443
            sed -i 's|image: .*|image: ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}|g' ${FILE_NAME}.yml
            oc project royalnavy-dev
            oc apply -f ${FILE_NAME}.yml
            oc get route
          """
        }
      }
    }
  }

  post {
    success { echo '✅ Application deployed successfully!' }
    failure { echo '❌ Deployment failed. Please check the logs.' }
  }
}
