pipeline {
  agent any

  environment {
    DOCKER_IMAGE_NAME = "royalnavy/laravel-image"
    DOCKER_IMAGE_TAG  = "v${BUILD_NUMBER}"
    FILE_NAME         = "laravel"
    DOCKER_HUB        = "b2ff3deb-afa2-4d83-9867-cd72fdee776d"  // credsId docker hub
    OC_TOKEN          = "baba7fa1-f682-4c2e-ba9b-070e1edc5e34"  // credsId ocp token
  }

  stages {

    stage ('Checkout') {
      steps {
        git branch: 'master', url: 'https://github.com/muhamadilhamh/Laravel-CI-CD.git'
      }
    }

    /* === TRIVY FS: Show all severities, fail only if CRITICAL === */
     stage('Trivy FS Scan (source)') {
        steps {
            sh '''
            set -e

            # 1) Human readable (semua severity), tidak fail
            trivy fs . \
            --severity LOW,MEDIUM,HIGH,CRITICAL \
            --ignore-unfixed \
            --exit-code 0 \
            --cache-dir "$TRIVY_CACHE" \
            --format table

            # 2) Output untuk parsing & arsip
            trivy fs . --severity LOW,MEDIUM,HIGH,CRITICAL --ignore-unfixed --exit-code 0 --cache-dir "$TRIVY_CACHE" --format json  > trivy-fs.json
            trivy fs . --severity LOW,MEDIUM,HIGH,CRITICAL --ignore-unfixed --exit-code 0 --cache-dir "$TRIVY_CACHE" --format sarif --output trivy-fs.sarif

            # 3) Summary count
            LOW=$(grep -o '"Severity":"LOW"'       trivy-fs.json | wc -l || true)
            MED=$(grep -o '"Severity":"MEDIUM"'    trivy-fs.json | wc -l || true)
            HIGH=$(grep -o '"Severity":"HIGH"'     trivy-fs.json | wc -l || true)
            CRIT=$(grep -o '"Severity":"CRITICAL"' trivy-fs.json | wc -l || true)

            echo "---- Trivy FS Summary ----"
            echo "LOW=$LOW  MEDIUM=$MED  HIGH=$HIGH  CRITICAL=$CRIT"

            # 4) Gate: fail hanya jika CRITICAL; HIGH cuma warning
            if [ "$CRIT" -gt 0 ]; then
            echo "❌ Found CRITICAL vulns in source: $CRIT"; exit 1
            elif [ "$HIGH" -gt 0 ]; then
            echo "⚠️  Found HIGH vulns in source: $HIGH (not failing build)"
            fi
            '''
        }
      post { always { archiveArtifacts artifacts: 'trivy-fs.*', allowEmptyArchive: true } }
    }

    stage('PHPUnit & Coverage') {
      when { expression { fileExists('vendor/bin/phpunit') } }
      steps {
        sh '''
          set -e
          php -d xdebug.mode=coverage vendor/bin/phpunit --coverage-clover coverage.xml || true
        '''
      }
      post { always { archiveArtifacts artifacts: 'coverage.xml', allowEmptyArchive: true } }
    }

    stage('SonarQube Analysis') {
      steps {
        withSonarQubeEnv('sonarqube') {
          script {
            def scannerHome = tool 'SonarScanner'
            sh """
              ${scannerHome}/bin/sonar-scanner \
                -Dsonar.projectKey=laravel-app-ci-cd \
                -Dsonar.sources=. \
                -Dsonar.php.file.suffixes=.php \
                -Dsonar.exclusions=**/vendor/**,**/node_modules/**,**/storage/**,**/public/**
            """
          }
        }
      }
    }

    stage('Quality Gate') {
      steps {
        timeout(time: 15, unit: 'MINUTES') {
          script {
            def qg = waitForQualityGate()
            if (qg.status != 'OK') error "Pipeline failed because Quality Gate was ${qg.status}"
          }
        }
      }
    }

    stage ('Build Docker Image') {
      steps {
        sh "docker build -t ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG} ."
      }
    }

    stage('Push Docker Image') {
      steps {
        withCredentials([usernamePassword(credentialsId: "${DOCKER_HUB}", passwordVariable: 'DOCKER_PASS', usernameVariable: 'DOCKER_USER')]) {
          sh '''
            set -e
            echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
            docker push ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}
            docker logout || true
          '''
        }
      }
    }

    /* === TRIVY IMAGE: Show all severities, fail only if CRITICAL === */
    stage('Trivy Image Scan (registry)') {
      steps {
        withCredentials([usernamePassword(credentialsId: "${DOCKER_HUB}", passwordVariable: 'DOCKER_PASS', usernameVariable: 'DOCKER_USER')]) {
          sh '''
            set -e
            # 1) Tampilkan semua severity; tidak fail
            trivy image \
            --severity LOW,MEDIUM,HIGH,CRITICAL \
            --ignore-unfixed \
            --exit-code 0 \
            --cache-dir "$TRIVY_CACHE" \
            --username "$DOCKER_USER" --password "$DOCKER_PASS" \
            --format table \
            ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}

            # 2) JSON + SARIF untuk arsip/parse
            trivy image --severity LOW,MEDIUM,HIGH,CRITICAL --ignore-unfixed --exit-code 0 --cache-dir "$TRIVY_CACHE" --username "$DOCKER_USER" --password "$DOCKER_PASS" --format json  ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG} > trivy-image.json
            trivy image --severity LOW,MEDIUM,HIGH,CRITICAL --ignore-unfixed --exit-code 0 --cache-dir "$TRIVY_CACHE" --username "$DOCKER_USER" --password "$DOCKER_PASS" --format sarif --output trivy-image.sarif ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}

            # 3) Summary count
            LOW=$(grep -o '"Severity":"LOW"'       trivy-image.json | wc -l || true)
            MED=$(grep -o '"Severity":"MEDIUM"'    trivy-image.json | wc -l || true)
            HIGH=$(grep -o '"Severity":"HIGH"'     trivy-image.json | wc -l || true)
            CRIT=$(grep -o '"Severity":"CRITICAL"' trivy-image.json | wc -l || true)

            echo "---- Trivy Image Summary ----"
            echo "LOW=$LOW  MEDIUM=$MED  HIGH=$HIGH  CRITICAL=$CRIT"

            # 4) Gate: fail hanya jika CRITICAL
            if [ "$CRIT" -gt 0 ]; then
            echo "❌ Found CRITICAL vulns in image: $CRIT"; exit 1
            elif [ "$HIGH" -gt 0 ]; then
            echo "⚠️  Found HIGH vulns in image: $HIGH (not failing build)"
            fi
          '''
        }
      }
      post { always { archiveArtifacts artifacts: 'trivy-image.sarif', allowEmptyArchive: true } }
    }

        stage ('Deploy via OpenShift') {
                steps {
                    withCredentials([string(credentialsId:"${OC_TOKEN}" , variable: 'TOKEN')]){
                        echo 'Deploying application on target server via OpenShift...'
                        // sh "oc login --token=$TOKEN --server=https://api.rm1.0a51.p1.openshiftapps.com:6443"
                        sh "oc login --token=sha256~JlUY1K0T1KgSXYwAGcTzVpGqX_9L0cEI0LNvDoS6fQ0 --server=https://api.rm1.0a51.p1.openshiftapps.com:6443"
                        sh "sed -i 's|image: .*|image: ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}|g' ${FILE_NAME}.yml"
                        sh "oc project royalnavy-dev"
                        sh "oc apply -f ${FILE_NAME}.yml"
                        sh "oc get route"
                    }
                }
            }
  }

  post {
    success { echo '✅ Application deployed successfully!' }
    failure { echo '❌ Deployment failed. Please check the logs.' }
  }
}
